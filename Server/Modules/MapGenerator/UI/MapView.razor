@using System.Drawing
@using Fracture.Server.Modules.MapGenerator.Models
@using Fracture.Server.Modules.MapGenerator.UI.Models
@using Fracture.Server.Modules.Pathfinding.Models

<div id="map">
    @if (Map != null && MapDisplayData != null)
    {
        <table class="@(IsMiniMap ? "miniMapTable" : "mapTable")">
            @for (int y = 0; y < Map.Grid.GetLength(1); y++)
            {
                <tr>
                    @for (int x = 0; x < Map.Grid.GetLength(0); x++)
                    {
                        Node node = Map.Grid[x, y];
                        @switch (MapDisplayData.TileInformationDisplay)
                        {
                            case TileInformationDisplay.None:
                                <MapSquare Node="node" IsMiniMap="IsMiniMap">
                                    @RenderLocation(node)
                                </MapSquare>
                                break;
                            case TileInformationDisplay.Position:
                                <MapSquare Node="node">
                                    x:@x<br/>y:@y
                                </MapSquare>
                                break;
                            case TileInformationDisplay.Noise:
                                <MapSquare Node="node">
                                    @Math.Round(node.NoiseValue, 2)
                                </MapSquare>
                                break;
                            case TileInformationDisplay.Path:
                                <MapSquare Node="node">
                                    @GetPathForTile(node)
                                </MapSquare>
                                break;
                            default:
                                <MapSquare Node="node">
                                    @RenderLocation(node)
                                </MapSquare>
                                break;
                        }
                    }
                </tr>
            }
        </table>
    }
</div>

@code {
    [Parameter]
    public MapData? Map { get; set; }

    [Parameter]
    public MapDisplayData? MapDisplayData { get; set; }

    [Parameter]
    public List<IPathfindingNode>? Path { get; set; }

    [Parameter]
    public bool IsMiniMap { get; set; } = true;

    private string GetPathForTile(Node node)
    {
        if (Path == null)
        {
            return "";
        }
    
        int pathNodeIndex = Path.FindIndex(n => n.XId == node.XId && n.YId == node.YId);
        if (pathNodeIndex != -1 && pathNodeIndex + 1 < Path.Count)
        {
            int xDirection = Path[pathNodeIndex + 1].XId - Path[pathNodeIndex].XId;
            int yDirection = Path[pathNodeIndex].YId - Path[pathNodeIndex + 1].YId;
            return GetArrowForDirection(xDirection, yDirection);
        }
        return "";
    }

    private string GetArrowForDirection(int xDirection, int yDirection)
    {
        return yDirection switch
        {
            1 when xDirection == 0 => SpecialChars.Arrows.Up,
            1 when xDirection == 1 => SpecialChars.Arrows.UpRight,
            0 when xDirection == 1 => SpecialChars.Arrows.Right,
            -1 when xDirection == 1 => SpecialChars.Arrows.DownRight,
            -1 when xDirection == 0 => SpecialChars.Arrows.Down,
            -1 when xDirection == -1 => SpecialChars.Arrows.DownLeft,
            0 when xDirection == -1 => SpecialChars.Arrows.Left,
            1 when xDirection == -1 => SpecialChars.Arrows.UpLeft,
            _ => ""
        };
    }
    
    private string RenderLocation(Node node)
    {
        return node.Location switch
        {
            Location.None => string.Empty,
            Location.Town => "T",
            _ => string.Empty
        };
    }
}
