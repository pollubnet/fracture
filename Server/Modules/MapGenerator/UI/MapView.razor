@using System.Drawing
@using Fracture.Server.Components.Pages
@using Fracture.Server.Modules.MapGenerator.Models
@using Fracture.Server.Modules.MapGenerator.UI.Models
@using Fracture.Server.Modules.Pathfinding.Models
@using Fracture.Server.Modules.Shared.ImageChangers
@using Microsoft.AspNetCore.Components.Web




<div id="map" tabindex="0" @onkeydown="HandleKeyDown">
    @if (Map != null && MapDisplayData != null)
    {
        <table class="@(IsMiniMap ? "miniMapTable" : "mapTable")">
            @for (int y = 0; y < Map.Grid.GetLength(1); y++)
            {
                <tr>
                    @for (int x = 0; x < Map.Grid.GetLength(0); x++)
                    {
                        @if (x == CharacterXX && y == CharacterYY)
                        {   
                            <td style='background: @GetTileColor(@Map.Grid[x, y]); font-size:6px;'>
                                &#128528
                            </td>
                        }
                        else if (MapDisplayData.TileInformationDisplay == TileInformationDisplay.Position)
                        {
                            <td style="background: @GetTileColor(@Map.Grid[x, y]);">
                                x:@x<br/>y:@y
                            </td>
                        }
                        else if (MapDisplayData.TileInformationDisplay == TileInformationDisplay.Noise)
                        {
                            <td style="background: @GetTileColor(@Map.Grid[x, y])">
                                @Math.Round(Map.Grid[x, y].NoiseValue, 2)
                            </td>
                        }
                        else if (MapDisplayData.TileInformationDisplay == TileInformationDisplay.None)
                        {
                            <td style='background: @GetTileColor(@Map.Grid[x, y])'>
                            </td>
                        }
                        else if (MapDisplayData.TileInformationDisplay == TileInformationDisplay.Path)
                        {
                            <td style='font-size: 16px; background: @GetTileColor(@Map.Grid[x, y])'>
                                @GetPathForTile(Map.Grid[x, y])
                            </td>
                        }
                    }
                </tr>
            }
        </table>
    }
</div>

@code {
    [Parameter]
    public MapData? Map { get; set; }

    [Parameter]
    public MapDisplayData? MapDisplayData { get; set; }

    [Parameter]
    public List<IPathfindingNode>? Path { get; set; }

    [Parameter]
    public bool IsMiniMap { get; set; } = true;
    
    
    private bool isMoving = false;
    public static int CharacterXX { get; set; } = 16;
    public static int CharacterYY { get; set; } = 16;
    [Parameter] public int CharacterX { get; set; } = CharacterXX;
    [Parameter] public int CharacterY { get; set; } = CharacterXX;
    
    private readonly HashSet<string> _blockingColors = new HashSet<string>
    {
        "#21618C","#2E86C1"
    };
    
    private string GetTileColor(Node node)
    {
        
        if (MapDisplayData!.ShowColorMap) {
            Color color = node.Biome.Color;
            string hex = $"#{color.R:X2}{color.G:X2}{color.B:X2}"; // rgb -> hex
            return hex ?? string.Empty;
        }

        string hexValue = string.Format("{0:x}", (int)(node.NoiseValue * 255));
        if (hexValue.Length == 1)
        {
            hexValue = "0" + hexValue;
        }
        return $"#{hexValue}{hexValue}{hexValue}";
    }

    private string GetPathForTile(Node node)
    {
        if (Path == null)
        {
            return "";
        }

        int pathNodeIndex = Path.FindIndex(n => n.XId == node.XId && n.YId == node.YId);
        if (pathNodeIndex != -1 && pathNodeIndex + 1 < Path.Count)
        {
            int xDirection = Path[pathNodeIndex + 1].XId - Path[pathNodeIndex].XId;
            int yDirection = Path[pathNodeIndex].YId - Path[pathNodeIndex + 1].YId;
            return GetArrowForDirection(xDirection, yDirection);
        }
        return "";
    }

    private string GetArrowForDirection(int xDirection, int yDirection)
    {
        return yDirection switch
        {
            1 when xDirection == 0 => SpecialChars.Arrows.Up,
            1 when xDirection == 1 => SpecialChars.Arrows.UpRight,
            0 when xDirection == 1 => SpecialChars.Arrows.Right,
            -1 when xDirection == 1 => SpecialChars.Arrows.DownRight,
            -1 when xDirection == 0 => SpecialChars.Arrows.Down,
            -1 when xDirection == -1 => SpecialChars.Arrows.DownLeft,
            0 when xDirection == -1 => SpecialChars.Arrows.Left,
            1 when xDirection == -1 => SpecialChars.Arrows.UpLeft,
            _ => ""
        };
    }
    
    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        BackgroundImageChanger backgroundImage = new()
        {
            BackgroundImage = GamePage.BackgroundImage,
            Map = Map
        };
        if (IsMiniMap==false)
        {
            if (isMoving) return; 
            isMoving = true;
            int newX = CharacterXX;
            int newY = CharacterYY;
            switch (e.Key)
            {
                case "ArrowUp":
                    if (CharacterYY > 0)
                    {
                        newY--;
                    }
                   
                    break;
                case "ArrowDown":
                    if (CharacterYY < Map.Grid.GetLength(1) - 1)
                    {
                        newY++;
                    }
                    break;
                case "ArrowLeft":
                    if (CharacterXX > 0)
                    {
                        newX--;
                    }
                    break;
                case "ArrowRight":
                    if (CharacterXX < Map.Grid.GetLength(0) - 1)
                    {
                        newX++;
                    }
                    break;
            }
    
            if (CanMoveToTile(newX, newY))
            {
                CharacterXX = newX;
                CharacterYY = newY;
                StateHasChanged();
            }

            Task.Delay(100).ContinueWith(_ =>
            {
                isMoving = false; 
            });
        }
     
        
    }

    private bool CanMoveToTile(int x, int y)
    {
        if (Map != null && Map.Grid[x,y].Walkable==true)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

   

}

