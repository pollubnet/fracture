@using Fracture.Server.Modules.Items.Models
@using Fracture.Server.EnumExtensions

<div class="col">
    <div class="card" style="min-width: 13rem;">
        <div class="card-header" style="background-color: var(@Item.Rarity.ToCssClassName())">
            @Item.Name
        </div>
        <div class="card-body">
            <button class="buttonEquip" @onmouseover="ShowItemHistoryAsync" @onmouseleave="HideItemHistoryAsync" data-bs-toggle="collapse" data-bs-target="#collapse-@guid">Item History </button>
            <div class="collapse" id="collapse-@guid">
                <p class="card-text">@Item.History</p>
            </div>
            <ItemStats Item="@Item"></ItemStats>

            @if (IsEquipped)
            {
                <button class="buttonEquip" @onclick="OnUnequipClicked">Unequip this</button>
            }
            else
            {
                <button class="buttonEquip" @onclick="OnEquipClicked">Equip this</button>
            }
        </div>
    </div>
</div>
<div class="collapse">
    @foreach (var item in messages)
    {
        <p>
            @item
        </p>
    }
</div>
@code {
    private readonly Guid guid = Guid.NewGuid();

    List<string> messages = new List<string>();
    private async Task ShowItemHistoryAsync() { } //await collapse1.ShowAsync();
    private async Task HideItemHistoryAsync() { } //await collapse1.HideAsync();
    [Parameter] public Item Item { get; set; } = null!;
    [Parameter] public bool IsEquipped { get; set; }
    [Parameter] public bool ItemHistory { get; set; }
    [Parameter] public EventCallback OnEquipClicked { get; set; }
    [Parameter] public EventCallback OnUnequipClicked { get; set; }
}
