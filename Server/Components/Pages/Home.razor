@page "/"
@page "/home"

@rendermode InteractiveServer

@using Fracture.Server.Components.Layout
@using Fracture.Server.Modules.Items.Models
@using Fracture.Server.Components.Popups
@using System.Collections.ObjectModel
@using Fracture.Server.Modules.Database
@using Fracture.Server.Modules.Users
@using Fracture.Server.Components.UI
@using Microsoft.AspNetCore.Mvc

@layout GameLayout
@inject IUsersRepository UsersRepository
@inject NavigationManager NavigationManager

<div id="container">
	<PopupContainer @ref="_popup"></PopupContainer>
	<div class="login">
		LOGIN
		<br>
		<input type="text" @bind="_username"/>
		<br>
		<button @onclick="HandleUserLogin">Zaloguj (lub stwórz)</button>
	</div>
</div>

@code {
	private readonly ObservableCollection<Item> _equipment = new();
	private readonly ObservableCollection<Item> _inventory = new();
	private User _user = new();
	private string _username = String.Empty;
	
	private PopupContainer _popup = null!;
	private string _loginInfo = string.Empty;
	private Dictionary<string, object> _equipmentPopupParameters = null!;
	protected override Task OnInitializedAsync()
	{
		_equipmentPopupParameters = new()
		{
			{"Inventory", _inventory},
			{"Equipment", _equipment},
			{"UserData", _user}
		};
		return base.OnInitializedAsync();
	}
	
	private async Task HandleUserLogin()
	{
		
		var user = await UsersRepository.GetUserAsync(_username);
		if (user == null)
		{
			user = new User
			{
				Username = _username,
				CreatedAt = DateTime.UtcNow
			};
			await UsersRepository.AddUserAsync(user);
		}
		_user = user;
		_equipmentPopupParameters["UserData"] = _user;
		_loginInfo = $"Zalogowano: {_user.Username}";
		if (_popup.Component is not null && _popup.Component.Instance is not null && _popup.Component.Type == typeof(EquipmentPopup))
		{
			var equipmentPopup = (EquipmentPopup)_popup.Component.Instance;
			equipmentPopup.UserData = _user;
			equipmentPopup.Refresh();
		}
		NavigationManager.NavigateTo($"/game/{_username}");
	}

	
}
