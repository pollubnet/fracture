@using Fracture.Server.Modules.MapGenerator.Models
@using Fracture.Server.Modules.MapGenerator.Services
@using Fracture.Server.Modules.MapGenerator.UI.Models
@using Fracture.Server.Modules.NoiseGenerator.Models
@using Fracture.Server.Modules.Pathfinding.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@implements IDisposable 
@page "/game"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Fracture.Server.Components.Layout
@using Fracture.Server.Components.Popups
@using Fracture.Server.Components.UI
@using Fracture.Server.Modules.Items.Models
@using System.Collections.ObjectModel
@using System.Reflection.Metadata
@using Fracture.Server.Modules.Database
@using Fracture.Server.Modules.Users
@using Fracture.Server.Components.Pages
@using Fracture.Server.Modules.Shared
@using Fracture.Server.Modules.MapGenerator.UI
@using Modules.Shared.ImageChanger
@using Microsoft.AspNetCore.Session
@using Microsoft.OpenApi.Extensions
@using SQLitePCL
@layout GameLayout
@inject IUsersRepository UsersRepository
@inject NavigationManager NavigationManager
@inject IItemsRepository ItemsRepository
@inject VersionInfoProvider VersionInfoProvider
@inject IMapGeneratorService MapGeneratorService
@inject BacgroundImageChanger BIC
<link rel="icon" type="image/png" href="assets/icons/favicon.png"/>

<div id="container">
	<div class="leftPanel borderPanel">
		<div class="stats">
			<div class="info">
				<div class="info-content">
					<div @onclick="() => _popup.ShowComponent<StatsPopup>()">
						<img src="assets/icons/infobutton.svg" />
					</div>
				</div>
			</div>
			<UserStats Equipment="_equipment"></UserStats>
		</div>
		<div class="equipment">
			<div class="info">
				<div class="info-content">
					<div @onclick="() => _popup.ShowComponent<EquipmentPopup>(_equipmentPopupParameters)">
						<img src="assets/icons/infobutton.svg" />
						
					</div>
				</div>
			</div>
			<EquipmentTable Equipment="@_equipment" />
		</div>

	</div>
	<div class="midPanel borderPanel">
		<div class="map">
		</div>
		<div class="eqManager">
		</div>
		<div class="statManager ">
		</div>
		<div class="dialogueWindowBg" style="background: url(@bacgroundImage.bgImg);">
			<div class="dialogueWindow" @onkeydown="GetBacgroundAsync">
				Fracture @VersionInfoProvider.InformationalVersion<br />
				tutaj log mojej gry<br />
				<PopupContainer @ref="_popup" ></PopupContainer>
			</div>
		</div>
		<div class="crystalBox">
			<div class="actionButton"><div class="actionButton-content"><img src="assets/icons/swordbutton.svg" /></div></div>
			<div class="actionButton"><div class="actionButton-content"><img src="assets/icons/shieldbutton.svg" /></div></div>
			<div class="crystalCircle">
				<div class="crystal">
					<img src="assets/icons/crystal.png" alt="">
				</div>
			</div>
			<div class="actionButton"><div class="actionButton-content"><img src="assets/icons/skipbutton.svg" /></div></div>
			<div class="actionButton"><div class="actionButton-content"><img src="assets/icons/chatbutton.svg" /></div></div>
		</div>


	</div>
	<div class="rightPanel borderPanel">
		<div class="journal">
			<div class="info">
				<div class="info-content">
					<div @onclick="() => _popup.ShowComponent<JournalPopup>()" ></div><img src="assets/icons/infobutton.svg" />
				</div>
			</div>

			<div class="journalPage">
				<p>
					<span>Log1:<br></span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum numquam quaerat officiis placeat ipsa cupiditate nobis dolore perferendis, odit culpa perspiciatis, vero delectus ex omnis ad magni, deserunt quae? Ex.
				</p>
				<p>
					<span>Log2:<br></span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum numquam quaerat officiis placeat ipsa cupiditate nobis dolore perferendis, odit culpa perspiciatis, vero delectus ex omnis ad magni, deserunt quae? Ex.
				</p>
				<p>
					<span>Log3:<br></span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum numquam quaerat officiis placeat ipsa cupiditate nobis dolore perferendis, odit culpa perspiciatis, vero delectus ex omnis ad magni, deserunt quae? Ex.
				</p>
			</div>
		</div>
		<div class="miniMap">
			<div class="info">
				<div class="info-content">
					<div @onclick="() => _popup.ShowComponent<MapPopup>(_mapPopupParameters)"><img src="assets/icons/infobutton.svg" /></div>
				</div>
			</div>
			<MapView Map="_map" MapDisplayData="_mapDisplayData" Path="_path"></MapView>
		</div>
		<div class="settings">
			<div class="settingsBtn">
				<div class="settingsBtn-content">
					<img src="assets/icons/settingsbutton.svg" />
				</div>
			</div>
			<div class="settingsBtn">
				<div class="settingsBtn-content">
					<img src="assets/icons/hourglassbutton.svg" />
				</div>
			</div>
			<div class="settingsBtn">
				<div class="settingsBtn-content">
					<div @onclick="@Logout"><img src="assets/icons/exitbutton.svg" /></div>
				</div>
			</div>

		</div>
	</div>
</div>

@code {
	private User _user = new();
	private readonly ObservableCollection<Item> _equipment = new();
	private readonly ObservableCollection<Item> _inventory = new();
	
	private Dictionary<string, object> _equipmentPopupParameters = null!;
	private Dictionary<string, object> _mapPopupParameters = null!;
	public static MapData? _map { get; set; }

	
	private PopupContainer _popup = null!;
	private string _loginInfo = string.Empty;
	

	public static BacgroundImage bacgroundImage { get; set; } = new BacgroundImage(String.Empty);

	private MapDisplayData _mapDisplayData = new();
	
	private List<IPathfindingNode>? _path { get; set; }
	private NoiseParameters _noiseParameters = new();
	
	

	private bool hasChanged => BIC._bacgroundImage.bgImg is not null;
	
	protected override async Task OnInitializedAsync()
	{
		var username = await ProtectedSessionStore.GetAsync<string>("username");

		// brak sesji
		if (!username.Success)
		{
			NavigationManager.NavigateTo($"/");
			return;
		}

		if (string.IsNullOrEmpty(username.Value))
		{
			NavigationManager.NavigateTo($"/");
			return;
		}

		var user = await UsersRepository.GetUserAsync(username.Value!);
		if (user is null)
		{
			user = new User { Username = username.Value! };
			await UsersRepository.AddUserAsync(user);
		}

		_user = user;

		_inventory.Clear();
		_equipment.Clear();
		foreach (var item in await ItemsRepository.GetItemsOfUserAsync(_user.Id))
		{
			_inventory.Add(item);
		}

		foreach (var item in _inventory.ToList().Where(i => i.IsEquipped))
		{
			_equipment.Add(item);
		}

		_equipmentPopupParameters = new()
		{
			{ "UserData", _user },
			{ "Equipment", _equipment },
			{ "Inventory", _inventory }
		};

		_map = await MapGeneratorService.GetMap(_noiseParameters);
		_mapDisplayData.ShowColorMap = true;
		_mapPopupParameters = new()
		{
			{ "Map", _map },
			{ "MapDisplayData", _mapDisplayData }
		};

		BIC.Map = _map;
		BIC._bacgroundImage = bacgroundImage;
		await GetBacgroundAsync();
		
		this.BIC.BgImgChanged += this.OnBgChanged!;
		
		await base.OnInitializedAsync();
		
	}

	private void Logout()
	{
		NavigationManager.NavigateTo("/home");
		ProtectedSessionStore.DeleteAsync("username");
	}

	private async Task GetBacgroundAsync() => await BIC.changeBgImgAsync();

	private void OnBgChanged(object sender, EventArgs e) => this.InvokeAsync(this.StateHasChanged);

	public void Dispose()
	{
		this.BIC.BgImgChanged -= this.OnBgChanged!;
	}


}


