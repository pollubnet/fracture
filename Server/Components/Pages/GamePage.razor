@page "/game/{_username}"

@rendermode InteractiveServer

@using Fracture.Server.Components.Layout
@using Fracture.Server.Components.Popups
@using Fracture.Server.Components.UI
@using Fracture.Server.Modules.Items.Models
@using System.Collections.ObjectModel
@using System.Reflection.Metadata
@using Fracture.Server.Modules.Database
@using Fracture.Server.Modules.Users
@using Fracture.Server.Components.Pages
@layout GameLayout
@inject IUsersRepository UsersRepository
@inject NavigationManager Navigation



<div id="container" >
	<div class="leftPanel borderPanel">
		<div class="stats">
			<div class="info">
				<div class="info-content">
					<div @onclick="() => _popup.ShowComponent<StatsPopup>()"><img src="assets/infobutton.svg"
					</div>
				</div>
			</div>
			<UserStats Equipment="_equipment"></UserStats>
		</div>
		<div class="equipment">
			<div class="info">
				<div class="info-content">
					<div @onclick="() => _popup.ShowComponent<EquipmentPopup>(_equipmentPopupParameters)"><img src="assets/infobutton.svg"
					</div>
				</div>
			</div>
			<table class="equipmentTable">
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>

				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>

				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>

				</tr>

			</table>
		</div>

	</div>
	<div class="midPanel borderPanel">
		<div class="map">
		</div>
		<div class="eqManager">
		</div>
		<div class="statManager ">
		</div>
		<div class="dialogueWindowBg">
			<div class="dialogueWindow">
				tutaj log mojej gry<br />
				tutaj log mojej gry<br />
                <PopupContainer @ref="_popup"></PopupContainer>
			</div>
		</div>
		<div class="cristalBox">
			<div class="actionButton"><div class="actionButton-content"><img src="assets/swordbutton.svg"</div></div>
			<div class="actionButton"><div class="actionButton-content"><img src="assets/shieldbutton.svg"</div></div>
			<div class="cristalCircle">
				<div class="crystal">
					<img src="assets/crystal.png" alt="">
				</div>
			</div>
			<div class="actionButton"><div class="actionButton-content"><img src="assets/skipbutton.svg"</div></div>
			<div class="actionButton"><div class="actionButton-content"><img src="assets/chatbutton.svg"</div></div>
		</div>


	</div>
	<div class="rightPanel borderPanel">
		<div class="journal">
			<div class="info">
				<div class="info-content">
					<div @onclick="() => _popup.ShowComponent<JournalPopup>()"></div><img src="assets/infobutton.svg"
				</div>
			</div>

			<div class="journalPage">
				<p>
					<span>Log1:<br></span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum numquam quaerat officiis placeat ipsa cupiditate nobis dolore perferendis, odit culpa perspiciatis, vero delectus ex omnis ad magni, deserunt quae? Ex.
				</p>
				<p>
					<span>Log2:<br></span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum numquam quaerat officiis placeat ipsa cupiditate nobis dolore perferendis, odit culpa perspiciatis, vero delectus ex omnis ad magni, deserunt quae? Ex.
				</p>
				<p>
					<span>Log3:<br></span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum numquam quaerat officiis placeat ipsa cupiditate nobis dolore perferendis, odit culpa perspiciatis, vero delectus ex omnis ad magni, deserunt quae? Ex.
				</p>
			</div>
		</div>
		<div class="miniMap">
			<div class="info">
				<div class="info-content">
					<div @onclick="() => _popup.ShowComponent<MapPopup>()"></div><img src="assets/infobutton.svg"
				</div>
			</div>
			<table class="miniMapTable">
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
			</table>
		</div>
		<div class="settings">
			<div class="settingsBtn">
				<div class="settingsBtn-content">
					<img src="assets/settingsbutton.svg"
				</div>
			</div>
			<div class="settingsBtn">
				<div class="settingsBtn-content">
					<img src="assets/hourglassbutton.svg"
				</div>
			</div>
			<div class="settingsBtn">
				<div class="settingsBtn-content">
					<img src="assets/exitbutton.svg"
				</div>
			</div>

		</div>
	</div>
</div>


@code {
	private User _user = new(); 
	private readonly ObservableCollection<Item> _equipment = new();
	private readonly ObservableCollection<Item> _inventory = new();

	private bool logged = false;
   [Parameter] public string  _username { get; set; }

    private Dictionary<string, object> _equipmentPopupParameters = null!;

	private PopupContainer _popup = null!;
	private string _loginInfo = string.Empty;

	
	protected override Task OnInitializedAsync()
	{
		HandleUserLogin();
		_equipmentPopupParameters = new()
	    {
	        {"Inventory", _inventory},
	        {"Equipment", _equipment},
	        {"UserData",  _user}
		};
		return base.OnInitializedAsync();
	}

	private async Task HandleUserLogin()
	{
		
		var user = await UsersRepository.GetUserAsync(_username);
		if (user == null)
		{
			Navigation.NavigateTo($"/home");
		}
		else
		{ 
			_user = user;
			_equipmentPopupParameters["UserData"] = _user;
			if (_popup.Component is not null && _popup.Component.Instance is not null && _popup.Component.Type == typeof(EquipmentPopup))
			{
				var equipmentPopup = (EquipmentPopup)_popup.Component.Instance;
				equipmentPopup.UserData = _user;
				equipmentPopup.Refresh();
			}
		}
		
	}
}
