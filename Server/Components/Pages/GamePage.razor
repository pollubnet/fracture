@page "/game"
@rendermode InteractiveServer

@using Fracture.Server.Components.Layout
@using Fracture.Server.Components.Popups
@using Fracture.Server.Components.UI
@using Fracture.Server.Modules.Items.Models

@layout GameLayout

<div id="container">
	<div class="sidebar-container">
		<div class="stats-flex">
			<div @onclick="() => _popup.ShowComponent<StatsPopup>()">STATYSTYKI</div>
			<UserStats Equipment="_equipment"></UserStats>
		</div>
		<div class="equipment-flex">
            <div @onclick="() => _popup.ShowComponent<EquipmentPopup>(_equipmentPopupParameters)">EKWIPUNEK</div>

			Siatka aktualnie założonych
			+ ostatnio zdobyte
		</div>
	</div>
	<div class="text-container">
		<PopupContainer @ref="_popup"></PopupContainer>

		tutaj log mojej gry<br />
		tutaj log mojej gry<br />
	</div>
	<div class="sidebar-container">
		<div class="journal-flex">
			<div @onclick="() => _popup.ShowComponent<JournalPopup>()">JOURNAL</div>
		</div>
		<div class="map-flex">
			<div @onclick="() => _popup.ShowComponent<MapPopup>()">MINIMAPA</div>
		</div>
		<div class="button-container-flex">
			<div class="action-button">
				1
			</div>
			<div class="action-button">
				2
			</div>
			<div class="action-button">
				3
			</div>
			<div class="action-button" @onclick="() => _popup.ShowComponent<SettingsPopup>()">
				4
			</div>
		</div>
	</div>
</div>


@code {
	private readonly List<Item> _equipment = new();
	private readonly List<Item> _inventory = new();

    private Dictionary<string, object> _equipmentPopupParameters;

    private PopupContainer _popup;

	protected override Task OnInitializedAsync()
	{
	    _equipmentPopupParameters = new()
	    {
	        {"inventory", _inventory},
	        {"equipment", _equipment},
	        {"OnEquipmentChanged", EventCallback.Factory.Create(this, HandleEquipmentChanged)}
	    };
	    return base.OnInitializedAsync();
	}

	public async Task HandleEquipmentChanged()
    {
        await InvokeAsync(StateHasChanged);
    }
}
