@page "/game"
@using Fracture.Server.Components.Layout
@using Fracture.Server.Components.UI
@using ItemGeneratorModels

@layout GameLayout

<div id="container">
	<div class="sidebar-container">
		<div class="stats-flex">
			STATYSTYKI
			<UserStats Equipment="equipment"></UserStats>
		</div>
		<div class="equipment-flex">
			EKWIPUNEK

			<ItemCard Item="item"></ItemCard>

			Siatka aktualnie założonych
			+ ostatnio zdobyte
		</div>
	</div>
	<div class="text-container">
		TEKST

		<Fracture.Server.Components.Popups.EquipmentPopup></Fracture.Server.Components.Popups.EquipmentPopup>
	</div>
	<div class="sidebar-container">
		<div class="journal-flex">
			JOURNAL
		</div>
		<div class="map-flex">
			MINIMAPA
		</div>
		<div class="button-container-flex">
			<div class="action-button">
				1
			</div>
			<div class="action-button">
				2
			</div>
			<div class="action-button">
				3
			</div>
			<div class="action-button">
				4
			</div>
		</div>
	</div>
</div>


@code {
	private List<Item> equipment = new();
	private Item item;

	protected override Task OnInitializedAsync()
	{
		var ItemGeneratorUrl = "http://eiga.pollub.net/item";

		var hc = new HttpClient();
		item = hc.GetFromJsonAsync<Item>(ItemGeneratorUrl).Result;

		return base.OnInitializedAsync();
	}
}
