@using Fracture.Server.Components.UI
@using Fracture.Server.Modules.Items.Models
@using Fracture.Server.Modules.Items.Services

@inject IItemGenerator ItemGenerator

<button class="btn btn-primary" @onclick="GenerateNewItem">Generate new item </button>


<div class="row">
    <div class="col-5 border border-primary overflow-scroll" style="height: 80vh">
        <div class="row row-cols-2 g-4">
            @foreach (var item in inventory.Where(x => !IsEquipped(x)))
            {                
                <ItemCard Item="@item" OnEquipClicked="() => Equip(item)" IsEquipped="IsEquipped(item)" OnUnequipClicked="() => Unequip(item)"></ItemCard>
            }
        </div>
    </div>
    <div class="col-5 border border-secondary overflow-scroll" style="height: 80vh">
        <div class="row row-cols-2 g-4">
            @foreach (var item in equipment)
            {
                <ItemCard Item="@item" OnEquipClicked="() => Equip(item)" IsEquipped="IsEquipped(item)" OnUnequipClicked="() => Unequip(item)"></ItemCard>
            }
        </div>
    </div>
    <div class="col-2">
        <table class="table">
        @foreach (var itemStat in Enum.GetValues<ItemStat>())
        {
            var stat = equipment.Sum(x => x.Statistics[itemStat]);
            var color = "";
                @if (stat <= 0)
                    color = "text-danger";

            <tr><td>@itemStat</td><td class="@color text-end">@stat</td></tr>
        }
        </table>
    </div>
</div>

@code {
    private List<Item> inventory = [];
    private List<Item> equipment = [];
    private const int slots = 6;



    public async Task GenerateNewItem()
    {
        var item = await ItemGenerator.Generate();

        if (item is not null)
            inventory.Add(item);
        
        StateHasChanged();
    }

    public void Equip(Item item)
    {
        if (equipment.Count < slots)
            equipment.Add(item);
    }

    public void Unequip(Item item)
    {
        equipment.Remove(item);
    }

    public bool IsEquipped(Item item)
    {
        return equipment.Contains(item);
    }
}