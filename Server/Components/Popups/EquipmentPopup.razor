@using Fracture.Server.Components.UI
@using Fracture.Server.Modules.Items.Models
@using Fracture.Server.Modules.Items.Services
@using System.Collections.ObjectModel

@inject IItemGenerator ItemGenerator
	<div class="row">
		<div>
			<button class = "buttonEquip" @onclick="GenerateNewItem">Generate new item </button>
		</div>
	<div class=equipmentContent style="height: 65vh">
		<div class="eqColumn">
			Inventory
			@foreach (var item in Inventory.Where(x => !IsEquipped(x)))
			{
				<ItemCard Item="@item" OnEquipClicked="() => Equip(item)" IsEquipped="IsEquipped(item)" OnUnequipClicked="() => Unequip(item)"></ItemCard>
			}
		</div>
		<div class="eqColumn">
			Equipped
			@foreach (var item in Equipment)
			{
				<ItemCard Item="@item" OnEquipClicked="() => Equip(item)" IsEquipped="IsEquipped(item)" OnUnequipClicked="() => Unequip(item)"></ItemCard>
			}
		</div>

	</div>
	</div>
@code {

    [Parameter] public required ObservableCollection<Item> Inventory { get; set; }
    [Parameter] public required ObservableCollection<Item> Equipment { get; set; }
        
    private const int slots = 6;

    public async Task GenerateNewItem()
	{
		var item = await ItemGenerator.Generate();

		if (item is not null)
			Inventory.Add(item);
	}

	public void Equip(Item item)
	{
		if (Equipment.Count < slots)
			Equipment.Add(item);
	}

	public void Unequip(Item item)
	{
		Equipment.Remove(item);
	}

	public bool IsEquipped(Item item)
	{
		return Equipment.Contains(item);
	}
}