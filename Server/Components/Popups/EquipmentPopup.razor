@using Fracture.Server.Components.UI
@using Fracture.Server.Modules.Items.Models
@using Fracture.Server.Modules.Items.Services
@using System.Collections.ObjectModel

@inject IItemGenerator ItemGenerator

<div class="position-absolute w-100">
	<div class="row">
	<div class="col-6 border border-primary overflow-scroll mt-1" style="height: 80vh">
		<h3>Inventory</h3>
		<div class="row row-cols-2 g-4">
			@foreach (var item in inventory.Where(x => !IsEquipped(x)))
			{
				<ItemCard Item="@item" OnEquipClicked="() => Equip(item)" IsEquipped="IsEquipped(item)" OnUnequipClicked="() => Unequip(item)"></ItemCard>
			}
		</div>
	</div>
	<div class="col-6 border border-secondary overflow-scroll mt-1" style="height: 80vh">
		<h3>Equipped</h3>
		<div class="row row-cols-2 g-4">
			@foreach (var item in equipment)
			{
				<ItemCard Item="@item" OnEquipClicked="() => Equip(item)" IsEquipped="IsEquipped(item)" OnUnequipClicked="() => Unequip(item)"></ItemCard>
			}
		</div>
	</div>
</div>
</div>
<div class="position-absolute">
<div class="row">
	<div class="col-12 m-3">
		<button class="btn btn-primary" @onclick="GenerateNewItem">Generate new item </button>
	</div>
</div>
</div>
@code {
	[Parameter] public ObservableCollection<Item> inventory { get; set; }
	[Parameter] public ObservableCollection<Item> equipment { get; set; }
        
    private const int slots = 6;

    public async Task GenerateNewItem()
	{
		var item = await ItemGenerator.Generate();

		if (item is not null)
			inventory.Add(item);
	}

	public void Equip(Item item)
	{
		if (equipment.Count < slots)
			equipment.Add(item);
	}

	public void Unequip(Item item)
	{
		equipment.Remove(item);
	}

	public bool IsEquipped(Item item)
	{
		return equipment.Contains(item);
	}
}