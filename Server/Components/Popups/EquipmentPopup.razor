@using Fracture.Server.Components.UI
@using Fracture.Server.Modules.Items.Models
@using Fracture.Server.Modules.Items.Services
@using System.Collections.ObjectModel
@using Fracture.Server.Modules.Database
@using Fracture.Server.Modules.Users

@inject IItemGenerator ItemGenerator
@inject IItemsRepository ItemsRepository
@inject ILogger<EquipmentPopup> Logger

<div class="row">
    <div class="buttonEquipBg">
        <button class = "buttonEquip" @onclick="GenerateNewItem">Generate new item </button>
    </div>
    <div class=equipmentContent style="height: 65vh">
        <div class="eqColumn">
            Inventory
            @foreach (var item in Inventory.Where(x => !IsEquipped(x)))
            {
                <ItemCard Item="@item" OnEquipClicked="() => Equip(item)" IsEquipped="IsEquipped(item)" OnUnequipClicked="() => Unequip(item)"></ItemCard>
            }
        </div>
        <div class="eqColumn">
            Equipped
            @foreach (var item in Equipment)
            {
                <ItemCard Item="@item" OnEquipClicked="() => Equip(item)" IsEquipped="IsEquipped(item)" OnUnequipClicked="() => Unequip(item)"></ItemCard>
            }
        </div>

    </div>
</div>

@code {

    [Parameter] public required ObservableCollection<Item> Inventory { get; set; }
    [Parameter] public required ObservableCollection<Item> Equipment { get; set; }
	[Parameter] public required User UserData { get; set; }
        
    private const int slots = 6;

    protected override async Task OnInitializedAsync()
    {
        Inventory.Clear();
		Equipment.Clear();
        foreach (var item in await ItemsRepository.GetItemsOfUserAsync(UserData.Id))
        {
            Inventory.Add(item);
        }

        foreach (var item in Inventory.ToList().Where(i => i.IsEquipped))
		{
		    Equipment.Add(item);
		}

		Logger.LogInformation($"Inventory initialized for user: {UserData.Username}");
    }

    public async void Refresh()
    {
		Logger.LogInformation($"Refreshing! New username: {UserData.Username}");
        Inventory.Clear();
        Equipment.Clear();
        foreach (var item in await ItemsRepository.GetItemsOfUserAsync(UserData.Id))
        {
            Inventory.Add(item);
        }

        foreach (var item in Inventory.ToList().Where(i => i.IsEquipped))
        {
            Equipment.Add(item);
        }
        await OnInitializedAsync();
    }

    public async Task GenerateNewItem()
	{
		var item = await ItemGenerator.Generate();

        if (item is not null)
        {
            item.CreatedBy = UserData;
			item.CreatedById = UserData.Id;
            await ItemsRepository.AddItemAsync(item);
            Inventory.Add(item);
        }
	}

	public void Equip(Item item)
	{
		
	    if (Equipment.Count < slots)
	    {
		    for (int i = 0; i < Equipment.Count; i++)
		    {
			    if (Equipment[i].Type.Equals(item.Type))
			    {
				    if (item.Type.Equals(ItemType.Ring))
				    {
					    item.IsEquipped = true;
					    ItemsRepository.UpdateItemAsync(item);
					    Equipment.Add(item);
				    }
				    return;
			    }
		    }
	        item.IsEquipped = true;
			ItemsRepository.UpdateItemAsync(item);
	        Equipment.Add(item);
	    }
	}

	public void Unequip(Item item)
	{
	    item.IsEquipped = false;
		ItemsRepository.UpdateItemAsync(item);
	    Equipment.Remove(item);
	}

	public bool IsEquipped(Item item)
	{
		return Equipment.Contains(item);
	}
}